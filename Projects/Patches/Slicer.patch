Index: Applications/SlicerApp/CMakeLists.txt
===================================================================
--- Applications/SlicerApp/CMakeLists.txt	(revision 21513)
+++ Applications/SlicerApp/CMakeLists.txt	(working copy)
@@ -140,8 +140,16 @@
 endif(Q_WS_MAC)
 
 if(QT_MAC_USE_COCOA)
+  # [CmakeTools] Fix for using Qt from MacPorts.
+  find_path(qt_menu_nib_path
+    qt_menu.nib
+    PATHS "@QT_QTGUI_LIBRARY_RELEASE@/Resources"
+          "@QT_QTGUI_LIBRARY_RELEASE@/../Resources")
+  if(NOT qt_menu_nib_path)
+    message(FATAL_ERROR "Failed to find qt_menu.nib")
+  endif()
   get_filename_component(qt_menu_nib
-    "@QT_QTGUI_LIBRARY_RELEASE@/Resources/qt_menu.nib"
+    "${qt_menu_nib_path}/qt_menu.nib"
     REALPATH)
 
   set(qt_menu_nib_sources
Index: Base/QTGUI/qSlicerScriptedLoadableModule.cxx
===================================================================
--- Base/QTGUI/qSlicerScriptedLoadableModule.cxx	(revision 21513)
+++ Base/QTGUI/qSlicerScriptedLoadableModule.cxx	(working copy)
@@ -139,7 +139,8 @@
   Q_ASSERT(newPythonSource.endsWith(".py"));
 
   // Open the file
-#ifdef _WIN32
+  // [CmakeTools] Fix compilation error on Windows.
+#if 0
   FILE* pyfile = PyRun_OpenFile(newPythonSource.toLatin1());
 #else
   FILE* pyfile = fopen(newPythonSource.toLatin1(), "r");
@@ -169,7 +170,8 @@
     classToInstantiate = PyDict_GetItemString(global_dict, className.toLatin1());
     PyDict_SetItemString(global_dict, "__name__", PyString_FromString("__main__"));
     }
-#ifdef _WIN32
+    // [CmakeTools] Fix compilation error on Windows.
+#if 0
   PyRun_CloseFile(pyfile);
 #else
   fclose(pyfile);
Index: Base/QTGUI/qSlicerScriptedLoadableModuleWidget.cxx
===================================================================
--- Base/QTGUI/qSlicerScriptedLoadableModuleWidget.cxx	(revision 21513)
+++ Base/QTGUI/qSlicerScriptedLoadableModuleWidget.cxx	(working copy)
@@ -123,7 +123,8 @@
   Q_ASSERT(newPythonSource.endsWith(".py"));
 
   // Open the file
-#ifdef _WIN32
+  // [CmakeTools] Fix compilation error on Windows.
+#if 0
   FILE* pyfile = PyRun_OpenFile(newPythonSource.toLatin1());
 #else
   FILE* pyfile = fopen(newPythonSource.toLatin1(), "r");
@@ -170,7 +171,8 @@
     return false;
     }
 
-#ifdef _WIN32
+    // [CmakeTools] Fix compilation error on Windows.
+#if 0
   PyRun_CloseFile(pyfile);
 #else
   fclose(pyfile);
Index: CMake/SlicerBlockCTKAppLauncherSettings.cmake
===================================================================
--- CMake/SlicerBlockCTKAppLauncherSettings.cmake	(revision 21513)
+++ CMake/SlicerBlockCTKAppLauncherSettings.cmake	(working copy)
@@ -131,7 +131,7 @@
     )
 endif()
 
-if(Slicer_USE_PYTHONQT)
+if(Slicer_USE_PYTHONQT AND NOT DEFINED CMT_PYTHON_EXECUTABLE)
   set(SLICER_PYTHONHOME ${Slicer_SUPERBUILD_DIR}/python-build)
   get_filename_component(SLICER_PYTHON_LIB_DIR ${PYTHON_LIBRARY} PATH)
   list(APPEND SLICER_LIBRARY_PATHS_BUILD
@@ -143,6 +143,9 @@
   if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
     set(pythonpath_subdir "Lib")
   endif()
+elseif(DEFINED CMT_PYTHON_EXECUTABLE)
+  list(APPEND SLICER_LIBRARY_PATHS_BUILD
+    ${CTK_DIR}/PythonQt-build/<CMAKE_CFG_INTDIR>)
 endif()
 
 if(Slicer_USE_QtTesting)
@@ -151,7 +154,7 @@
     )
 endif()
 
-if(Slicer_USE_NUMPY)
+if(Slicer_USE_NUMPY AND NOT DEFINED CMT_PYTHON_EXECUTABLE)
   list(APPEND SLICER_LIBRARY_PATHS_BUILD
     ${SLICER_PYTHONHOME}/${pythonpath_subdir}/site-packages/numpy/core
     ${SLICER_PYTHONHOME}/${pythonpath_subdir}/site-packages/numpy/lib
@@ -194,7 +197,7 @@
 #       Please note that the environment variable is SLICER_HOME,
 #       CMake refers to the variable as Slicer_HOME, and the tcl variable is SlicerHome.
 
-if(Slicer_USE_PYTHONQT)
+if(Slicer_USE_PYTHONQT AND NOT DEFINED CMT_PYTHON_EXECUTABLE)
   set(PYTHONPATH "<APPLAUNCHER_DIR>/bin/<CMAKE_CFG_INTDIR>")
   set(PYTHONPATH "${PYTHONPATH}<PATHSEP><APPLAUNCHER_DIR>/bin/Python")
   set(PYTHONPATH "${PYTHONPATH}<PATHSEP>${SLICER_PYTHONHOME}/${pythonpath_subdir}")
@@ -270,7 +273,7 @@
     )
 endif()
 
-if(UNIX AND Slicer_USE_PYTHONQT)
+if(UNIX AND Slicer_USE_PYTHONQT AND NOT DEFINED CMT_PYTHON_EXECUTABLE)
   # On windows, both pythonQt and python libraries are installed allong with the executable
   list(APPEND SLICER_LIBRARY_PATHS_INSTALLED
     <APPLAUNCHER_DIR>/lib/Python/lib
@@ -290,14 +293,14 @@
     )
 endif()
 
-if(Slicer_USE_PYTHONQT)
+if(Slicer_USE_PYTHONQT AND NOT DEFINED CMT_PYTHON_EXECUTABLE)
   set(pythonpath_subdir lib/python${Slicer_PYTHON_VERSION_DOT})
   if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
     set(pythonpath_subdir "Lib")
   endif()
 endif()
 
-if(Slicer_USE_NUMPY)
+if(Slicer_USE_NUMPY AND NOT DEFINED CMT_PYTHON_EXECUTABLE)
   list(APPEND SLICER_LIBRARY_PATHS_INSTALLED
     <APPLAUNCHER_DIR>/lib/Python/${pythonpath_subdir}/site-packages/numpy/core
     <APPLAUNCHER_DIR>/lib/Python/${pythonpath_subdir}/site-packages/numpy/lib
@@ -324,7 +327,7 @@
   "SLICER_HOME=<APPLAUNCHER_DIR>"
   )
 
-if(Slicer_USE_PYTHONQT)
+if(Slicer_USE_PYTHONQT AND NOT DEFINED CMT_PYTHON_EXECUTABLE)
   set(pythonpath_subdir lib/python${Slicer_PYTHON_VERSION_DOT})
   if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
     set(pythonpath_subdir "Lib")
Index: CMake/SlicerBlockInstallPython.cmake
===================================================================
--- CMake/SlicerBlockInstallPython.cmake	(revision 21513)
+++ CMake/SlicerBlockInstallPython.cmake	(working copy)
@@ -1,7 +1,8 @@
 # -------------------------------------------------------------------------
 # Find and install python
 # -------------------------------------------------------------------------
-if(Slicer_USE_PYTHONQT)
+# [CmakeTools] Disable installation if CMT_PYTHON_EXECUTABLE is provided.
+if(Slicer_USE_PYTHONQT AND NOT DEFINED CMT_PYTHON_EXECUTABLE)
 
   get_filename_component(SUPER_BUILD_DIR "${Slicer_BINARY_DIR}" PATH)
   set(PYTHON_DIR "${SUPER_BUILD_DIR}/python-build")
Index: Libs/MRML/Core/vtkMRMLFiducialListStorageNode.cxx
===================================================================
--- Libs/MRML/Core/vtkMRMLFiducialListStorageNode.cxx	(revision 21513)
+++ Libs/MRML/Core/vtkMRMLFiducialListStorageNode.cxx	(working copy)
@@ -520,5 +520,5 @@
 //----------------------------------------------------------------------------
 const char* vtkMRMLFiducialListStorageNode::GetDefaultWriteFileExtension()
 {
-  return "fcsv";
+  return "csv";
 }
Index: Libs/MRML/Core/vtkMRMLModelStorageNode.cxx
===================================================================
--- Libs/MRML/Core/vtkMRMLModelStorageNode.cxx	(revision 21513)
+++ Libs/MRML/Core/vtkMRMLModelStorageNode.cxx	(working copy)
@@ -413,6 +413,6 @@
 //----------------------------------------------------------------------------
 const char* vtkMRMLModelStorageNode::GetDefaultWriteFileExtension()
 {
-  return "vtk";
+  return "vtp";
 }
 
Index: Libs/MRML/Core/vtkMRMLVolumeArchetypeStorageNode.cxx
===================================================================
--- Libs/MRML/Core/vtkMRMLVolumeArchetypeStorageNode.cxx	(revision 21513)
+++ Libs/MRML/Core/vtkMRMLVolumeArchetypeStorageNode.cxx	(working copy)
@@ -598,7 +598,7 @@
 //----------------------------------------------------------------------------
 const char* vtkMRMLVolumeArchetypeStorageNode::GetDefaultWriteFileExtension()
 {
-  return "nrrd";
+  return "mhd";
 }
 
 //----------------------------------------------------------------------------
Index: Modules/Loadable/CMakeLists.txt
===================================================================
--- Modules/Loadable/CMakeLists.txt	(revision 21513)
+++ Modules/Loadable/CMakeLists.txt	(working copy)
@@ -17,16 +17,16 @@
   #FiberBundles
   SceneViews
   SlicerWelcome
-  TractographyDisplay
+  #TractographyDisplay  # [CmakeTools] Introduces build errors on Linux.
   Reformat
   ViewControllers
   Volumes
-  TractographyInteractiveSeeding # tractography depends of Volumes
+  #TractographyInteractiveSeeding # tractography depends of Volumes  # [CmakeTools] Introduces build errors on Linux.
   VolumeRendering # Volume Rendering depends of Volumes
   )
 if(Slicer_BUILD_CLI_SUPPORT)
   list(APPEND qtmodules
-    CropVolume
+    #CropVolume  # [CmakeTools] Introduces runtime errors.
     )
 endif()
 
Index: SuperBuild.cmake
===================================================================
--- SuperBuild.cmake	(revision 21513)
+++ SuperBuild.cmake	(working copy)
@@ -348,6 +348,14 @@
 #------------------------------------------------------------------------------
 set(proj Slicer)
 
+# [CmakeTools] Forward CMake options to internal Slicer project.
+set(CMT_CMAKE_ARGS
+  -DCMT_PYTHON_EXECUTABLE:FILEPATH=${CMT_PYTHON_EXECUTABLE})
+if(WIN32)
+  list(APPEND CMT_CMAKE_ARGS
+    -DSlicer_BUILD_WIN32_CONSOLE:BOOL=ON)
+endif()
+
 ExternalProject_Add(${proj}
   DEPENDS ${Slicer_DEPENDENCIES}
   DOWNLOAD_COMMAND ""
@@ -400,6 +408,8 @@
     -DjqPlot_DIR:PATH=${jqPlot_DIR}
     # LibArchive
     -DLibArchive_DIR:PATH=${LibArchive_DIR}
+    # [CmakeTools] Forward CMake options to internal Slicer project.
+    ${CMT_CMAKE_ARGS}
   INSTALL_COMMAND ""
   )
 
Index: SuperBuild/External_CTK.cmake
===================================================================
--- SuperBuild/External_CTK.cmake	(revision 21513)
+++ SuperBuild/External_CTK.cmake	(working copy)
@@ -100,12 +100,20 @@
       -DCTK_USE_QTTESTING:BOOL=${Slicer_USE_QtTesting}
       -DGIT_EXECUTABLE:FILEPATH=${GIT_EXECUTABLE}
       ${optional_ep_args}
+      -DCMT_CMAKE_DIR:PATH=${CMT_CMAKE_DIR}
+      -DCMT_GIT_EXECUTABLE:FILEPATH=${CMT_GIT_EXECUTABLE}
+      -DCMT_PATCH_EXECUTABLE:FILEPATH=${CMT_PATCH_EXECUTABLE}
+      -DCMT_PythonQt_PATCH:FILEPATH=${CMT_PythonQt_PATCH}
     INSTALL_COMMAND ""
     DEPENDS
       ${CTK_DEPENDENCIES}
     )
   set(CTK_DIR ${CMAKE_BINARY_DIR}/${proj}-build)
 
+  # [CmakeTools] Patch CTK and PythonQt subproject.
+  include(${CMT_CMAKE_DIR}/Functions.cmake)
+  cmt_patch_project(CTK ${CMT_CTK_PATCH})
+
 else()
   # The project is provided using CTK_DIR, nevertheless since other project may depend on CTK,
   # let's add an 'empty' one
Index: SuperBuild/External_NUMPY.cmake
===================================================================
--- SuperBuild/External_NUMPY.cmake	(revision 21513)
+++ SuperBuild/External_NUMPY.cmake	(working copy)
@@ -6,6 +6,16 @@
 endif()
 set(${CMAKE_CURRENT_LIST_FILENAME}_FILE_INCLUDED 1)
 
+# [CmakeTools] If CMT_PYTHON_EXECUTABLE is provided.
+if(DEFINED CMT_PYTHON_EXECUTABLE)
+  ExternalProject_Add(NUMPY
+    DOWNLOAD_COMMAND ""
+    CONFIGURE_COMMAND ""
+    BUILD_COMMAND ""
+    INSTALL_COMMAND "")
+  return()
+endif()
+
 # Set dependency list
 set(NUMPY_DEPENDENCIES python)
 
Index: SuperBuild/External_python.cmake
===================================================================
--- SuperBuild/External_python.cmake	(revision 21513)
+++ SuperBuild/External_python.cmake	(working copy)
@@ -18,6 +18,20 @@
 
 # Include dependent projects if any
 SlicerMacroCheckExternalProjectDependency(python)
+
+# [CmakeTools] If CMT_PYTHON_EXECUTABLE is provided.
+if(DEFINED CMT_PYTHON_EXECUTABLE)
+  ExternalProject_Add(python
+    DOWNLOAD_COMMAND ""
+    CONFIGURE_COMMAND ""
+    BUILD_COMMAND ""
+    INSTALL_COMMAND "")
+  set(slicer_PYTHON_INCLUDE ${CMT_PYTHON_INCLUDE_DIR})
+  set(slicer_PYTHON_LIBRARY ${CMT_PYTHON_LIBRARY})
+  set(slicer_PYTHON_EXECUTABLE ${CMT_PYTHON_EXECUTABLE})
+  return()
+endif()
+
 set(proj python)
 
 #message(STATUS "${__indent}Adding project ${proj}")
