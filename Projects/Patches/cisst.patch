Index: cisst/cisstStereoVision/examples/cameraviewer/cameraviewer.cpp
===================================================================
--- cisst/cisstStereoVision/examples/cameraviewer/cameraviewer.cpp	(revision 4092)
+++ cisst/cisstStereoVision/examples/cameraviewer/cameraviewer.cpp	(working copy)
@@ -27,6 +27,7 @@
 #include <cisstMultiTask/mtsComponentViewer.h>
 #include <cisstOSAbstraction/osaSleep.h>
 
+#undef CISST_HAS_QT
 #if CISST_HAS_QT
     #include <cisstStereoVision/svlQtObjectFactory.h>
     #include <cisstStereoVision/svlQtWidgetFileOpen.h>
Index: cisst/cmake/FindOpenCV2.cmake
===================================================================
--- cisst/cmake/FindOpenCV2.cmake	(revision 4092)
+++ cisst/cmake/FindOpenCV2.cmake	(working copy)
@@ -18,6 +18,17 @@
 # This file should be removed when CMake will provide an equivalent
 
 
+find_package(OpenCV
+  HINTS "${OpenCV2_ROOT_DIR}"
+  )
+if(OpenCV_FOUND)
+  set(OpenCV2_INCLUDE_DIRS ${OpenCV_INCLUDE_DIRS})
+  set(OpenCV2_LIBRARIES ${OpenCV_LIBS})
+  set(OpenCV2_FOUND ON)
+  return()
+endif()
+
+
 # typical root dirs of installations, exactly one of them is used
 IF(WIN32)
     SET(OpenCV2_POSSIBLE_ROOT_DIRS
Index: cisst/cmake/cisstMacros.cmake
===================================================================
--- cisst/cmake/cisstMacros.cmake	(revision 4092)
+++ cisst/cmake/cisstMacros.cmake	(working copy)
@@ -528,7 +528,7 @@
     set_source_files_properties (${SWIG_INTERFACE_FILE} PROPERTIES CPLUSPLUS ON)
     # make sure the runtime code is not included
     set_source_files_properties (${SWIG_INTERFACE_FILE}
-                                 PROPERTIES SWIG_FLAGS "-v;-modern;-fcompact;-fvirtual")
+                                 PROPERTIES SWIG_FLAGS "-modern;-fcompact;-fvirtual")
     # finally create the swig project using CMake command
     set (MODULE_NAME ${MODULE}Python)
     cisst_cmake_debug ("cisst_add_swig_module: swig_add_module (${MODULE_NAME} python ${SWIG_INTERFACE_FILE})")
@@ -536,6 +536,9 @@
     if (WIN32)
       set_target_properties (_${MODULE_NAME} PROPERTIES SUFFIX .pyd)
       set_target_properties (_${MODULE_NAME} PROPERTIES DEBUG_POSTFIX "_d")
+      set_target_properties (_${MODULE_NAME} PROPERTIES COMPILE_FLAGS "/wd4102")
+    else (WIN32)
+      set_target_properties (_${MODULE_NAME} PROPERTIES COMPILE_FLAGS "-Wno-unused-label -Wno-unused-parameter")
     endif (WIN32)
     cisst_cmake_debug ("cisst_add_swig_module: swig_link_libraries (${MODULE_NAME} ${MODULE_LINK_LIBRARIES} ${cisstPython_LIBRARIES})")
     swig_link_libraries (${MODULE_NAME} ${MODULE_LINK_LIBRARIES} ${cisstPython_LIBRARIES})
Index: saw/components/saw3Dconnexion/CMakeLists.txt
===================================================================
--- saw/components/saw3Dconnexion/CMakeLists.txt	(revision 4092)
+++ saw/components/saw3Dconnexion/CMakeLists.txt	(working copy)
@@ -15,4 +15,7 @@
 project (saw3Dconnexion)
 
 add_subdirectory (code)
-add_subdirectory (examples)
+
+if (CISST_BUILD_EXAMPLES)
+  add_subdirectory (examples)
+endif ()
Index: saw/components/saw3Dconnexion/examples/CMakeLists.txt
===================================================================
--- saw/components/saw3Dconnexion/examples/CMakeLists.txt	(revision 4092)
+++ saw/components/saw3Dconnexion/examples/CMakeLists.txt	(working copy)
@@ -14,6 +14,16 @@
 
 
 
-add_subdirectory (FLTK)
-add_subdirectory (Qt)
 add_subdirectory (osa)
+
+if (CISST_HAS_FLTK)
+  add_subdirectory (FLTK)
+else ()
+  message ("Information: code in ${CMAKE_CURRENT_SOURCE_DIR}/FLTK will not be compiled, it requires CISST_HAS_FLTK")
+endif ()
+
+if (CISST_HAS_QT)
+  add_subdirectory (Qt)
+else ()
+  message ("Information: code in ${CMAKE_CURRENT_SOURCE_DIR}/Qt will not be compiled, it requires CISST_HAS_QT")
+endif ()
Index: saw/components/sawClaronMicronTracker/CMakeLists.txt
===================================================================
--- saw/components/sawClaronMicronTracker/CMakeLists.txt	(revision 4092)
+++ saw/components/sawClaronMicronTracker/CMakeLists.txt	(working copy)
@@ -15,6 +15,11 @@
 project (sawClaronMicronTracker)
 
 add_subdirectory (code)
-if(CISST_HAS_QT)
-  add_subdirectory (examples)
-endif()
+
+if (CISST_BUILD_EXAMPLES)
+  if (CISST_HAS_QT)
+    add_subdirectory (examples)
+  else ()
+    message ("Information: code in ${CMAKE_CURRENT_SOURCE_DIR}/examples will not be compiled, it requires CISST_HAS_QT")
+  endif ()
+endif ()
Index: saw/components/sawClaronMicronTracker/code/mtsMicronTracker.cpp
===================================================================
--- saw/components/sawClaronMicronTracker/code/mtsMicronTracker.cpp	(revision 4092)
+++ saw/components/sawClaronMicronTracker/code/mtsMicronTracker.cpp	(working copy)
@@ -72,14 +72,15 @@
     config.GetXMLValue("/tracker/controller", "@markers", MarkerTemplatesDir);
 
     // add tools
-    int maxNumTools = 100;
     std::string toolName;
     std::string toolSerial, toolSerialLast;
     std::string toolDefinition;
+    unsigned int numberOfTools = 100;
+    //config.Query("count(/tracker/tools/*)", numberOfTools);
 
-    for (int i = 0; i < maxNumTools; i++) {
+    for (unsigned int i = 0; i < numberOfTools; i++) {
         std::stringstream context;
-        context << "/tracker/tools/tool[" << i << "]";
+        context << "/tracker/tools/tool[" << i+1 << "]";  // XML is one-based, adding one here
         config.GetXMLValue(context.str().c_str(), "@name", toolName, "");
         if (toolName.empty()) {
             continue;
@@ -218,8 +219,8 @@
     }
     CMN_LOG_CLASS_INIT_DEBUG << "Startup: calibration parameters:\n" << calibrationInfo.str() << std::endl;
 
-    //Camera_HdrEnabledSet(CurrentCamera, true);
-    Camera_HistogramEqualizeImagesSet(CurrentCamera, true);
+    Camera_HdrEnabledSet(CurrentCamera, true);
+    //Camera_HistogramEqualizeImagesSet(CurrentCamera, true);
     Camera_LightCoolnessSet(CurrentCamera, 0.56);  // obtain this value using CoolCard
 }
 
Index: saw/components/sawNDITracker/CMakeLists.txt
===================================================================
--- saw/components/sawNDITracker/CMakeLists.txt	(revision 4092)
+++ saw/components/sawNDITracker/CMakeLists.txt	(working copy)
@@ -15,6 +15,11 @@
 project (sawNDITracker)
 
 add_subdirectory (code)
-if(CISST_HAS_QT)
-  add_subdirectory (examples)
-endif()
+
+if (CISST_BUILD_EXAMPLES)
+  if (CISST_HAS_QT)
+    add_subdirectory (examples)
+  else ()
+    message ("Information: code in ${CMAKE_CURRENT_SOURCE_DIR}/examples will not be compiled, it requires CISST_HAS_QT")
+  endif ()
+endif ()
Index: saw/components/sawNDITracker/code/mtsNDISerial.cpp
===================================================================
--- saw/components/sawNDITracker/code/mtsNDISerial.cpp	(revision 4092)
+++ saw/components/sawNDITracker/code/mtsNDISerial.cpp	(working copy)
@@ -87,44 +87,36 @@
     config.GetXMLValue("/tracker/controller", "@definitions", toolDefinitionsDir, "");
 
     // add tools
-    int maxNumTools = 100;
-
-    int toolCount = 0;
-
-    config.Query("count(/tracker/tools/*)",toolCount);
-    int maxToolCount = static_cast<int>(std::min(toolCount,maxNumTools));
-
-    std::string toolName, toolSerial, toolSerialLast, toolDefinition;
+    std::string toolName, toolSerial, toolDefinition;
     Tool * tool;
+    unsigned int numberOfTools = 100;
+    //config.Query("count(/tracker/tools/*)", numberOfTools);
 
-    for (int i = 0; i < maxToolCount; i++) {
+    for (unsigned int i = 0; i < numberOfTools; i++) {
         std::stringstream context;
-        context << "/tracker/tools/tool[" << i+1 << "]"; /// \todo(dmirota) XML is one-based.  Adding one here.
+        context << "/tracker/tools/tool[" << i+1 << "]";  // XML is one-based, adding one here
         config.GetXMLValue(context.str().c_str(), "@name", toolName, "");
         if (toolName.empty()) {
             continue;
         }
         config.GetXMLValue(context.str().c_str(), "@serial", toolSerial);
         config.GetXMLValue(context.str().c_str(), "@definition", toolDefinition);
-        if (toolSerial != toolSerialLast) {
-            toolSerialLast = toolSerial;
-            if (toolDefinition == "") {
-                tool = AddTool(toolName, toolSerial.c_str());
-            } else {
-                std::string toolDefinitionPath = toolDefinitionsDir + toolDefinition;
-                tool = AddTool(toolName, toolSerial.c_str(), toolDefinitionPath.c_str());
-            }
-            context << "/tooltip";
-            std::string rotation, translation;
-            config.GetXMLValue(context.str().c_str(), "@rotation", rotation);
-            config.GetXMLValue(context.str().c_str(), "@translation", translation);
-            std::stringstream offset(translation);
-            double value;
-            for (unsigned int i = 0; offset >> value; i++) {
-                tool->TooltipOffset[i] = value;
-                offset.ignore(1);
-            }
+        if (toolDefinition == "") {
+            tool = AddTool(toolName, toolSerial.c_str());
+        } else {
+            std::string toolDefinitionPath = toolDefinitionsDir + toolDefinition;
+            tool = AddTool(toolName, toolSerial.c_str(), toolDefinitionPath.c_str());
         }
+        context << "/tooltip";
+        std::string rotation, translation;
+        config.GetXMLValue(context.str().c_str(), "@rotation", rotation);
+        config.GetXMLValue(context.str().c_str(), "@translation", translation);
+        std::stringstream offset(translation);
+        double value;
+        for (unsigned int j = 0; offset >> value; j++) {
+            tool->TooltipOffset[j] = value;
+            offset.ignore(1);
+        }
     }
 }
 
@@ -614,25 +606,30 @@
     mainType[2] = '\0';
     char serialNumber[9];
     serialNumber[8] = '\0';
+    char channel[2];
 
     for (unsigned int i = 0; i < portHandles.size(); i++) {
         CommandInitialize();
         CommandAppend("PHINF ");
         CommandAppend(portHandles[i].Pointer());
-        CommandAppend("0005");
+        CommandAppend("0021");  // 21 = 1 || 20
         CommandSend();
         ResponseRead();
-        sscanf(SerialBuffer, "%2c%*1X%*1X%*2c%*2c%*12c%*3c%8c%*2c%*20c",
-               mainType, serialNumber);
+        sscanf(SerialBuffer, "%2c%*1c%*1c%*2c%*2c%*12c%*3c%8c%*2c%*8c%*2c%*2c%2c",
+               mainType, serialNumber, channel);
 
+        // create a unique pseudo-serialNumber to differentiate the second channel of Dual 5DOF tools (Aurora only)
+        if (strncmp(channel, "01", 2) == 0) {
+            serialNumber[7] += 1;
+        }
+
         /// \todo This is a workaround for an issue using the USB port on the latest Aurora
-        if(strncmp(serialNumber,"00000000",8) == 0){
-            CMN_LOG_CLASS_INIT_DEBUG << "PortHandlesQuery: received serial number of all zeros.  Skipping this tool and trying again" << std::endl;
+        if (strncmp(serialNumber, "00000000", 8) == 0) {
+            CMN_LOG_CLASS_INIT_DEBUG << "PortHandlesQuery: received serial number of all zeros, skipping this tool and trying again" << std::endl;
             osaSleep(0.5 * cmn_s);
             PortHandlesInitialize();
             PortHandlesQuery();
             return;
-
         }
 
         // check if tool exists, generate a name and add it otherwise
@@ -693,14 +690,16 @@
             return;
         }
 
-        if (strncmp(tool->MainType, "01", 2) == 0) {
-            CommandAppend("S");
-        } else if (strncmp(tool->MainType, "02", 2) == 0) {
-            CommandAppend("D");
-        } else if (strncmp(tool->MainType, "03", 2) == 0) {
-            CommandAppend("B");
-        } else if (strncmp(tool->MainType, "0A", 2) == 0) {
-            CommandAppend("D");
+        if (strncmp(tool->MainType, "01", 2) == 0) {  // reference
+            CommandAppend("S");  // static
+        } else if (strncmp(tool->MainType, "02", 2) == 0) {  // probe
+            CommandAppend("D");  // dynamic
+        } else if (strncmp(tool->MainType, "03", 2) == 0) {  // button box or foot switch
+            CommandAppend("B");  // button box
+        } else if (strncmp(tool->MainType, "04", 2) == 0) {  // software-defined
+            CommandAppend("D");  // dynamic
+        } else if (strncmp(tool->MainType, "0A", 2) == 0) {  // C-arm tracker
+            CommandAppend("D");  // dynamic
         } else {
             CMN_LOG_CLASS_RUN_ERROR << "PortHandlesEnable: unknown tool of main type: " << tool->MainType << std::endl;
             return;
