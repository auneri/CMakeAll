set(ENVVAR "@ENVVAR@")
set(NAME "@NAME@")
set(CUSTOMIZATIONS "@CUSTOMIZATIONS@")
set(LAUNCHER_DIR "${CMAKE_CURRENT_LIST_DIR}")
if(WIN32)
  set(PATHSEP ";")
elseif(UNIX)
  set(PATHSEP ":")
else()
  message(FATAL_ERROR "Platform is not supported.")
endif()

# handle command-line arguments
set(ARGV "")
foreach(I RANGE 3 ${CMAKE_ARGC})
  list(APPEND ARGV ${CMAKE_ARGV${I}})
endforeach()

# default help
set(HELP
  "\n A cross-platform launcher that configures environment variables and executes\n"
  " the provided command within the current shell.\n\n"
  " Usage: cmake -P ${NAME}.cmake <command>\n"
  " Command aliases:\n"
  "   Terminal - Open a terminal.\n"
  "   Patch <path> - Create and dry-run a patch of a source directory under svn/git.\n")

# setup environment variables
foreach(X ${ENVVAR})
  string(FIND ${X} "+=" ENVVAR_APPEND)
  string(FIND ${X} "=+" ENVVAR_PREPEND)
  string(FIND ${X} "==" ENVVAR_SET)
  if(NOT ENVVAR_APPEND EQUAL -1)
    string(REPLACE "+=" ";" X ${X})
  elseif(NOT ENVVAR_PREPEND EQUAL -1)
    string(REPLACE "=+" ";" X ${X})
  elseif(NOT ENVVAR_SET EQUAL -1)
    string(REPLACE "==" ";" X ${X})
  endif()
  list(GET X 0 KEY)
  list(GET X 1 VALUE)
  file(TO_NATIVE_PATH ${VALUE} VALUE)
  if(NOT ENVVAR_APPEND EQUAL -1)
    set(ENV{${KEY}} "$ENV{${KEY}}${PATHSEP}${VALUE}")
  elseif(NOT ENVVAR_PREPEND EQUAL -1)
    set(ENV{${KEY}} "${VALUE}${PATHSEP}$ENV{${KEY}}")
  elseif(NOT ENVVAR_SET EQUAL -1)
    set(ENV{${KEY}} "${VALUE}")
  endif()
endforeach()

# command alias: Terminal
if(ARGV MATCHES "^Terminal$")
  if(WIN32)
    set(ARGV cmd.exe /c start cmd.exe)
  elseif(APPLE)
    execute_process(COMMAND bash -c "env | pbcopy")
    set(ARGV osascript
      -e "tell application \"Terminal\" to activate"
      -e "tell application \"System Events\" to tell process \"Terminal\" to keystroke \"t\" using command down"
      -e "tell application \"Terminal\" to do script \"bash\" in selected tab of the front window"
      -e "tell application \"Terminal\" to do script \"for env in `pbpaste`\; do export $env\; done\; clear\" in selected tab of the front window")
  elseif(UNIX)
    set(ARGV bash)
  else()
    message(FATAL_ERROR "Platform is not supported.")
  endif()
endif()

# command alias: Patch
if(ARGV MATCHES "^Patch")
  if(NOT UNIX)
    message(FATAL_ERROR "Command only available on UNIX")
  endif()
  list(GET ARGV 1 SOURCE_DIR)
  list(GET ARGV 2 PATCH_FILE)
  get_filename_component(SOURCE_DIR ${SOURCE_DIR} ABSOLUTE)
  get_filename_component(PATCH_FILE ${PATCH_FILE} ABSOLUTE)
  if(IS_DIRECTORY "${SOURCE_DIR}/.git")
    execute_process(COMMAND bash -c "git --version" RESULT_VARIABLE RESULT OUTPUT_QUIET ERROR_QUIET)
    if(RESULT)
      message(FATAL_ERROR "git is required")
    endif()
    message("Detected '${SOURCE_DIR}' as Git repository")
    execute_process(COMMAND bash -c "git diff > ${PATCH_FILE}" WORKING_DIRECTORY ${SOURCE_DIR})
    execute_process(COMMAND bash -c "git apply --check --reverse ${PATCH_FILE}" WORKING_DIRECTORY ${SOURCE_DIR})
  elseif(IS_DIRECTORY "${SOURCE_DIR}/.hg")
    execute_process(COMMAND bash -c "hg --version" RESULT_VARIABLE RESULT OUTPUT_QUIET ERROR_QUIET)
    if(RESULT)
      message(FATAL_ERROR "hg is required")
    endif()
    execute_process(COMMAND bash -c "patch --version" RESULT_VARIABLE RESULT OUTPUT_QUIET ERROR_QUIET)
    if(RESULT)
      message(FATAL_ERROR "patch is required")
    endif()
    message("Detected '${SOURCE_DIR}' as Mercurial repository")
    execute_process(COMMAND bash -c "hg export > ${PATCH_FILE}" WORKING_DIRECTORY ${SOURCE_DIR})
    execute_process(COMMAND bash -c "patch --dry-run --reverse --strip=1 --input=${PATCH_FILE}" WORKING_DIRECTORY ${SOURCE_DIR})
  elseif(IS_DIRECTORY "Detected Subversion repository")
    execute_process(COMMAND bash -c "svn --version" RESULT_VARIABLE RESULT OUTPUT_QUIET ERROR_QUIET)
    if(RESULT)
      message(FATAL_ERROR "svn is required")
    endif()
    message("Detected '${SOURCE_DIR}' as Subversion repository")
    execute_process(COMMAND bash -c "svn diff > ${PATCH_FILE}" WORKING_DIRECTORY ${SOURCE_DIR})
    execute_process(COMMAND bash -c "svn patch --dry-run --reverse-diff ${PATCH_FILE}" WORKING_DIRECTORY ${SOURCE_DIR})
  else()
    message(WARNING "Skipping diff, '${SOURCE_DIR}' is not under git/hg/svn version control")
    execute_process(COMMAND bash -c "patch --version" RESULT_VARIABLE RESULT OUTPUT_QUIET ERROR_QUIET)
    if(RESULT)
      message(FATAL_ERROR "patch is required")
    endif()
    execute_process(COMMAND bash -c "patch --dry-run --reverse --input=${PATCH_FILE}" WORKING_DIRECTORY ${SOURCE_DIR})
  endif()
  set(ARGV ${CMAKE_COMMAND} -E echo "Updated '${PATCH_FILE}'")
endif()

# include customizations
if(CUSTOMIZATIONS)
  include(${CUSTOMIZATIONS})
endif()

# execute commands
if(ARGV)
  execute_process(COMMAND ${ARGV} RESULT_VARIABLE RESULT)
  if("${RESULT}" STREQUAL "No such file or directory")
    message("${RESULT}")
  endif()
else()
  message(${HELP})
endif()
