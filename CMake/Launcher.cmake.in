set(ENVVAR "@ENVVAR@")
set(PATH "@PATH@")
set(LIBRARYPATH "@LIBRARYPATH@")
set(PYTHONPATH "@PYTHONPATH@")
set(NAME "@NAME@")
set(CUSTOMIZATIONS "@CUSTOMIZATIONS@")
set(NATIVE_PATH "")
set(NATIVE_LIBRARYPATH "")
set(NATIVE_PYTHONPATH "")
set(LAUNCHER_DIR "${CMAKE_CURRENT_LIST_DIR}")
set(PATHSEP ":")
if(WIN32)
  set(PATHSEP ";")
endif()

# handle command-line arguments
set(ARGV "")
foreach(I RANGE 3 ${CMAKE_ARGC})
  list(APPEND ARGV ${CMAKE_ARGV${I}})
endforeach()

# default help
set(HELP
  "Usage: cmake -P ${NAME}.cmake <command>\n\n"
  "A cross-platform launcher that configures environment variables and executes\n"
  "the provided command within the current shell.\n\n"
  "Command aliases:\n"
  "  Terminal - Open a terminal.\n"
  "  Patch <path> - Create and dry-run a patch of a source directory under svn/git.\n")

# setup environment variables
foreach(X ${ENVVAR})
  string(REPLACE "+=" ";" X ${X})
  list(GET X 0 KEY)
  list(GET X 1 VALUE)
  file(TO_NATIVE_PATH ${VALUE} VALUE)
  set(ENV{${KEY}} "${VALUE}${PATHSEP}$ENV{${KEY}}")
endforeach()
foreach(X ${PATH})
  file(TO_NATIVE_PATH ${X} Y)
  list(APPEND NATIVE_PATH ${Y})
endforeach()
foreach(X ${LIBRARYPATH})
  file(TO_NATIVE_PATH ${X} Y)
  list(APPEND NATIVE_LIBRARYPATH ${Y})
endforeach()
foreach(X ${PYTHONPATH})
  file(TO_NATIVE_PATH ${X} Y)
  list(APPEND NATIVE_PYTHONPATH ${Y})
endforeach()
string(REPLACE ";" "${PATHSEP}" PATH "${NATIVE_PATH}")
string(REPLACE ";" "${PATHSEP}" LIBRARYPATH "${NATIVE_LIBRARYPATH}")
string(REPLACE ";" "${PATHSEP}" PYTHONPATH "${NATIVE_PYTHONPATH}")
if(WIN32)
  set(ENV{PATH} "${LIBRARYPATH};$ENV{PATH}")
  set(ENV{PATH} "${PATH};$ENV{PATH}")
  set(ENV{PYTHONPATH} "${PYTHONPATH};$ENV{PYTHONPATH}")
elseif(APPLE)
  set(ENV{PATH} "${PATH}:$ENV{PATH}")
  set(ENV{DYLD_LIBRARY_PATH} "${LIBRARYPATH}:$ENV{DYLD_LIBRARY_PATH}")
  set(ENV{PYTHONPATH} "${PYTHONPATH}:$ENV{PYTHONPATH}")
elseif(UNIX)
  set(ENV{PATH} "${PATH}:$ENV{PATH}")
  set(ENV{LD_LIBRARY_PATH} "${LIBRARYPATH}:$ENV{LD_LIBRARY_PATH}")
  set(ENV{PYTHONPATH} "${PYTHONPATH}:$ENV{PYTHONPATH}")
else()
  message(FATAL_ERROR "Platform is not supported.")
endif()

# command alias: Terminal
if(ARGV MATCHES "^Terminal$")
  if(WIN32)
    set(ARGV cmd.exe /c cmd.exe)
  elseif(APPLE)
    execute_process(COMMAND bash -c "env | pbcopy")
    set(ARGV osascript
      -e "tell application \"Terminal\" to activate"
      -e "tell application \"System Events\" to tell process \"Terminal\" to keystroke \"t\" using command down"
      -e "tell application \"Terminal\" to do script \"for env in `pbpaste`\; do export $env\; done\" in selected tab of the front window")
  elseif(UNIX)
    set(ARGV bash)
  endif()
endif()

# command alias: Patch
if(ARGV MATCHES "^Patch")
  list(GET ARGV 1 SOURCE)
  set(ARGV bash ${CMAKE_CURRENT_LIST_DIR}/Patch.sh ${SOURCE})
endif()

# include customizations
if(CUSTOMIZATIONS)
  include(${CUSTOMIZATIONS})
endif()

# execute commands
if(ARGV)
  execute_process(COMMAND ${ARGV})
else()
  message(${HELP})
endif()
